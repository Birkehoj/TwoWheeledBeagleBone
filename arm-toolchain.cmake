set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR ARM)

set(TOOLCHAIN_PREFIX arm-linux-gnueabi-)

#set(_USED_GCC_VERSION 8)
#
#execute_process(
#  COMMAND ${UTIL_SEARCH_CMD} ${TOOLCHAIN_PREFIX}gcc-${_USED_GCC_VERSION}
#  OUTPUT_VARIABLE BINUTILS_PATH
#  OUTPUT_STRIP_TRAILING_WHITESPACE
#)
#message(${BINUTILS_PATH})
#get_filename_component(ARM_TOOLCHAIN_DIR ${BINUTILS_PATH} DIRECTORY)
## Without that flag CMake is not able to pass test compilation check
#set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
#set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}gcc-${_USED_GCC_VERSION})
#set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}g++-${_USED_GCC_VERSION})

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
set(CMAKE_C_COMPILER /usr/bin/arm-linux-gnueabihf-gcc-8)
set(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabihf-g++-8)

set(CMAKE_SYSTEM_PROCESSOR arm)
set(CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER})

set(CMAKE_OBJCOPY ${ARM_TOOLCHAIN_DIR}/${TOOLCHAIN_PREFIX}objcopy CACHE INTERNAL "objcopy tool")
set(CMAKE_SIZE_UTIL ${ARM_TOOLCHAIN_DIR}/${TOOLCHAIN_PREFIX}size CACHE INTERNAL "size tool")

set(CMAKE_FIND_ROOT_PATH ${BINUTILS_PATH})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
